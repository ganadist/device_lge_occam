From feba59f3da0a1ffb3cb4b80e619067387e0b3a7a Mon Sep 17 00:00:00 2001
From: Richard Uhler <ruhler@google.com>
Date: Fri, 6 Nov 2015 14:35:42 -0800
Subject: [PATCH 3/3] Improve performance of Reference processing.

By using synchronization on the ReferenceQueue instead of volatile
modifiers, and adding internal support for ReferenceQueue batch
enqueue and remove.

ReferenceBenchmark improvements on hammerhead:
                            Alloc   202 =>  153
                  AllocAndEnqueue   835 =>  476
              AllocEnqueueAndPoll  1104 =>  633
            AllocEnqueueAndRemove  1148 =>  690
    AllocImplicitEnqueueAndRemove 25265 => 1683
                     Finalization 27905 => 2404

Bug: 24404957
Change-Id: I6c3e83f7c34f5c22b001e513b50c932a0d54fd43
---
 benchmarks/src/benchmarks/ReferenceBenchmark.java  | 59 +++++++++++++++++
 libart/src/main/java/java/lang/Daemons.java        | 28 ++++----
 libart/src/main/java/java/lang/ref/Reference.java  | 52 +++++++++------
 .../main/java/java/lang/ref/ReferenceQueue.java    | 77 +++++++++++++++++++++-
 4 files changed, 179 insertions(+), 37 deletions(-)

diff --git a/benchmarks/src/benchmarks/ReferenceBenchmark.java b/benchmarks/src/benchmarks/ReferenceBenchmark.java
index 0fa63f2..6342453 100644
--- a/benchmarks/src/benchmarks/ReferenceBenchmark.java
+++ b/benchmarks/src/benchmarks/ReferenceBenchmark.java
@@ -19,6 +19,8 @@ package benchmarks;
 import com.google.caliper.SimpleBenchmark;
 import java.lang.ref.PhantomReference;
 import java.lang.ref.ReferenceQueue;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Benchmark to evaluate the performance of References.
@@ -68,4 +70,61 @@ public class ReferenceBenchmark extends SimpleBenchmark {
             }
         }
     }
+
+    // How fast can references can be implicitly allocated, enqueued, and
+    // removed?
+    public void timeAllocImplicitEnqueueAndRemove(int reps) {
+        ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+        List<Object> refs = new ArrayList<Object>();
+        for (int i = 0; i < reps; i++) {
+            refs.add(new PhantomReference<Object>(new Object(), queue));
+        }
+        Runtime.getRuntime().gc();
+        for (int i = 0; i < reps; i++) {
+            try {
+                queue.remove();
+            } catch (InterruptedException ie) {
+                i--;
+            }
+        }
+    }
+
+    static private class IntRef {
+      public int value = 0;
+    }
+
+    static private class FinalizableObject {
+        IntRef count;
+
+        public FinalizableObject(IntRef count) {
+            this.count = count;
+        }
+
+        @Override
+        protected void finalize() {
+            count.value++;
+        }
+    }
+
+    // How fast does finalization run?
+    public void timeFinalization(int reps) {
+        // Allocate a bunch of finalizable objects.
+        int n = reps;
+        IntRef count = new IntRef();
+        for (int i = 0; i < n; i++) {
+            new FinalizableObject(count);
+        }
+
+        // Run GC so the objects will be collected for finalization.
+        Runtime.getRuntime().gc();
+
+        // Wait for finalization.
+        Runtime.getRuntime().runFinalization();
+
+        // Double check all the objects were finalized.
+        if (n != count.value) {
+            throw new IllegalStateException(
+                    String.format("Only %i of %i objects finalized?", count.value, n));
+        }
+    }
 }
diff --git a/libart/src/main/java/java/lang/Daemons.java b/libart/src/main/java/java/lang/Daemons.java
index 0d97312..c6aaa83 100644
--- a/libart/src/main/java/java/lang/Daemons.java
+++ b/libart/src/main/java/java/lang/Daemons.java
@@ -22,6 +22,7 @@ import dalvik.system.VMRuntime;
 import java.lang.ref.FinalizerReference;
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
+import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.TimeoutException;
@@ -153,20 +154,9 @@ public final class Daemons {
                 } catch (InterruptedException e) {
                     continue;
                 }
-                enqueue(list);
+                ReferenceQueue.enqueuePending(list);
             }
         }
-
-        private void enqueue(Reference<?> list) {
-            Reference<?> start = list;
-            do {
-                // pendingNext is owned by the GC so no synchronization is required.
-                Reference<?> next = list.pendingNext;
-                list.pendingNext = null;
-                list.enqueueInternal();
-                list = next;
-            } while (list != start);
-        }
     }
 
     private static class FinalizerDaemon extends Daemon {
@@ -198,16 +188,22 @@ public final class Daemons {
                 try {
                     // Use non-blocking poll to avoid FinalizerWatchdogDaemon communication
                     // when busy.
-                    finalizingObject = (FinalizerReference<?>)queue.poll();
-                    progressCounter.lazySet(++localProgressCounter);
-                    if (finalizingObject == null) {
+                    List<Reference<?>> objects = queue.pollAll();
+                    if (objects == null) {
                         // Slow path; block.
+                        finalizingObject = null;
                         FinalizerWatchdogDaemon.INSTANCE.goToSleep();
                         finalizingObject = (FinalizerReference<?>)queue.remove();
                         progressCounter.set(++localProgressCounter);
                         FinalizerWatchdogDaemon.INSTANCE.wakeUp();
+                        doFinalize(finalizingObject);
+                    } else {
+                        for (Reference<?> object : objects) {
+                            finalizingObject = (FinalizerReference<?>)object;
+                            progressCounter.lazySet(++localProgressCounter);
+                            doFinalize(finalizingObject);
+                        }
                     }
-                    doFinalize(finalizingObject);
                 } catch (InterruptedException ignored) {
                 }
             }
diff --git a/libart/src/main/java/java/lang/ref/Reference.java b/libart/src/main/java/java/lang/ref/Reference.java
index 70967b5..ce6e442 100644
--- a/libart/src/main/java/java/lang/ref/Reference.java
+++ b/libart/src/main/java/java/lang/ref/Reference.java
@@ -126,30 +126,36 @@ public abstract class Reference<T> {
      * VM requirement: this field <em>must</em> be called "queue"
      * and be a java.lang.ref.ReferenceQueue.
      */
-    volatile ReferenceQueue<? super T> queue;
+    final ReferenceQueue<? super T> queue;
 
     /**
      * Used internally by java.lang.ref.ReferenceQueue.
      * VM requirement: this field <em>must</em> be called "queueNext"
      * and be a java.lang.ref.Reference.
+     * <p>
+     * This field forms a singly linked list of reference objects that have
+     * been enqueued. The last element of the list points to itself, so that
+     * we have the invariant that a reference is enqueued if and only if
+     * queueNext is non-null. Access to the queueNext field is guarded by
+     * synchronization on 'queue'.
      */
     @SuppressWarnings("unchecked")
-    volatile Reference queueNext;
+    Reference queueNext;
 
     /**
      * Used internally by the VM.  This field forms a circular and
      * singly linked list of reference objects discovered by the
      * garbage collector and awaiting processing by the reference
-     * queue thread.
-     *
-     * @hide
+     * queue thread. The pendingNext field is owned by the GC for
+     * synchronization purposes.
      */
-    public volatile Reference<?> pendingNext;
+    Reference<?> pendingNext;
 
     /**
      * Constructs a new instance of this class.
      */
     Reference() {
+        queue = null;
     }
 
     Reference(T r, ReferenceQueue<? super T> q) {
@@ -166,20 +172,14 @@ public abstract class Reference<T> {
     }
 
     /**
-     * Adds an object to its reference queue.
-     *
-     * @return {@code true} if this call has caused the {@code Reference} to
-     * become enqueued, or {@code false} otherwise
-     *
-     * @hide
+     * Adds an object to its reference queue. The caller is responsible for
+     * ensuring the lock is held on this Reference's queue, and for calling
+     * notify() on the queue after the reference has been enqueued.
      */
-    public final synchronized boolean enqueueInternal() {
+    final void enqueueInternal() {
         if (queue != null && queueNext == null) {
-            queue.enqueue(this);
-            queue = null;
-            return true;
+            queue.enqueueInternal(this);
         }
-        return false;
     }
 
     /**
@@ -190,7 +190,16 @@ public abstract class Reference<T> {
      * become enqueued, or {@code false} otherwise
      */
     public boolean enqueue() {
-        return enqueueInternal();
+        if (queue == null) {
+            return false;
+        }
+        synchronized (queue) {
+            if (queueNext == null) {
+                queue.enqueue(this);
+                return true;
+            }
+        }
+        return false;
     }
 
     /**
@@ -220,7 +229,12 @@ public abstract class Reference<T> {
      *         false} otherwise
      */
     public boolean isEnqueued() {
-        return queueNext != null;
+        if (queue == null) {
+            return false;
+        }
+        synchronized (queue) {
+            return queueNext != null;
+        }
     }
 
 }
diff --git a/luni/src/main/java/java/lang/ref/ReferenceQueue.java b/luni/src/main/java/java/lang/ref/ReferenceQueue.java
index 4c78fbf..0e674fc 100644
--- a/luni/src/main/java/java/lang/ref/ReferenceQueue.java
+++ b/luni/src/main/java/java/lang/ref/ReferenceQueue.java
@@ -17,6 +17,12 @@
 
 package java.lang.ref;
 
+import java.util.ArrayList;
+import java.util.List;
+
+ /**
+  * The {@code ReferenceQueue} is the container on which reference objects are
+  * enqueued when the garbage collector detects the reachability type specified
 /**
  * The {@code ReferenceQueue} is the container on which reference objects are
  * enqueued when the garbage collector detects the reachability type specified
@@ -126,12 +132,14 @@ public class ReferenceQueue<T> {
     }
 
     /**
-     * Enqueue the reference object on the receiver.
+     * Enqueue the reference object on the receiver. The caller is responsible
+     * for ensuring the lock is held on this queue, and for calling notify on
+     * this queue after the reference has been enqueued.
      *
      * @param reference
      *            reference object to be enqueued.
      */
-    synchronized void enqueue(Reference<? extends T> reference) {
+    void enqueueInternal(Reference<? extends T> reference) {
         if (tail == null) {
             head = reference;
         } else {
@@ -142,9 +150,74 @@ public class ReferenceQueue<T> {
         // points to itself.
         tail = reference;
         tail.queueNext = reference;
+    }
+
+    /**
+     * Enqueue the reference object on the receiver.
+     *
+     * @param reference
+     *            reference object to be enqueued.
+     */
+    synchronized void enqueue(Reference<? extends T> reference) {
+        enqueueInternal(reference);
         notify();
     }
 
+    /**
+     * Returns the list of all available references on the queue, removing
+     * them in the process. Does not wait for a reference to become available.
+     *
+     * @return a list of available references, or {@code null} if no reference
+     *         is immediately available.
+     *
+     * @hide
+     */
+    public synchronized List<Reference<? extends T>> pollAll() {
+        if (head == null) {
+            return null;
+        }
+
+        List<Reference<? extends T>> refs = new ArrayList<Reference<? extends T>>();
+        while (head != tail) {
+            Reference<? extends T> ref = head;
+            refs.add(ref);
+            head = ref.queueNext;
+            ref.queueNext = null;
+        }
+        refs.add(head);
+        head.queueNext = null;
+        tail = null;
+        head = null;
+        return refs;
+    }
+
+    /**
+     * Enqueue the given list of currently pending (unenqueued) references.
+     *
+     * @hide
+     */
+    public static void enqueuePending(Reference<?> list) {
+        Reference<?> start = list;
+        do {
+            ReferenceQueue queue = list.queue;
+            if (queue == null) {
+                Reference<?> next = list.pendingNext;
+                list.pendingNext = null;
+                list = next;
+            } else {
+                synchronized (queue) {
+                    do {
+                        Reference<?> next = list.pendingNext;
+                        list.pendingNext = null;
+                        list.enqueueInternal();
+                        list = next;
+                    } while (list != start && list.queue == queue);
+                    queue.notify();
+                }
+            }
+        } while (list != start);
+    }
+
     /** @hide */
     public static Reference<?> unenqueued = null;
 
-- 
2.6.2

