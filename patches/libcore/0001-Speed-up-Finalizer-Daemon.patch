From 1917559f64ef8c8793a1c0381c7f4f04f2309a4a Mon Sep 17 00:00:00 2001
From: Hans Boehm <hboehm@google.com>
Date: Wed, 30 Sep 2015 18:13:56 -0700
Subject: [PATCH 1/3] Speed up Finalizer Daemon

Finalization performance is occasionally performance critical.
Do as little per-object work in the finalizer as we possibly can.
This removes a per object lock acquisition, notify, and system
call (via JNI) to get the current time.

It also fixes a lost notify bug that could theoretically prevent
the last finalizer from ever timing out, and reduces the already
tiny chance of reporting the wrong object for a finalizer
timeout.

Minor disadvantages: A nonterminating finalizer can take twice
as long to time out.  The code is even more subtle.

Add benchmark to measure timing impact.

This was measured to improve performance on the added benchmark
by somewhere around 2 or 3%, which is hardly impressive.  But
we've discovered several otheri, probably more serious, performance
issues in this area, which should eventually make those 2 or 3% more
noticeable. And we have to start somewhere.

Bug: 24404957
Change-Id: I77cc1222752ad05caf90001126f3e9eb016b296e
---
 .../src/benchmarks/SmallBigIntegerBenchmark.java   |  64 +++++++++
 libart/src/main/java/java/lang/Daemons.java        | 158 ++++++++++++++-------
 2 files changed, 174 insertions(+), 48 deletions(-)
 create mode 100644 benchmarks/src/benchmarks/SmallBigIntegerBenchmark.java

diff --git a/benchmarks/src/benchmarks/SmallBigIntegerBenchmark.java b/benchmarks/src/benchmarks/SmallBigIntegerBenchmark.java
new file mode 100644
index 0000000..81a3ab5
--- /dev/null
+++ b/benchmarks/src/benchmarks/SmallBigIntegerBenchmark.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2015 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package benchmarks;
+
+import java.math.BigInteger;
+import java.util.Random;
+
+/**
+ * This pretends to measure performance of operations on small BigIntegers.
+ * Given our current implementation, this is really a way to measure performance of
+ * finalization and JNI.
+ * We manually determine the number of iterations so that it should cause total memory
+ * allocation on the order of a few hundred megabytes.  Due to BigInteger's reliance on
+ * finalization, these may unfortunately all be kept around at once.
+ */
+public class SmallBigIntegerBenchmark {
+    // We allocate about 2 1/3 BigIntegers per iteration.
+    // Assuming 100 bytes/BigInteger, this gives us around 500MB total.
+    static final int NITERS = 2 * 1000 * 1000;
+    static final BigInteger BIG_THREE = BigInteger.valueOf(3);
+    static final BigInteger BIG_FOUR = BigInteger.valueOf(4);
+
+    public static void main(String args[]) {
+        final Random r = new Random();
+        BigInteger x = new BigInteger(20, r);
+        final long startNanos = System.nanoTime();
+        long intermediateNanos = 0;
+        for (int i = 0; i < NITERS; ++i) {
+            if (i == NITERS / 100) {
+                intermediateNanos = System.nanoTime();
+            }
+            // We know this converges, but the compiler doesn't.
+            if (x.and(BigInteger.ONE).equals(BigInteger.ONE)) {
+                x = x.multiply(BIG_THREE).add(BigInteger.ONE);
+            } else {
+                x = x.shiftRight(1);
+            }
+        }
+        if (x.signum() < 0 || x.compareTo(BIG_FOUR) > 0) {
+            throw new AssertionError("Something went horribly wrong.");
+        }
+        final long finalNanos = System.nanoTime();
+        double firstFewTime = ((double) intermediateNanos - (double) startNanos) / (NITERS / 100);
+        double restTime = ((double) finalNanos - (double) intermediateNanos) / (99 * NITERS / 100);
+        System.out.println("First Few: " + firstFewTime
+                + " nanoseconds per iteration (2.33 BigInteger ops/iter)");
+        System.out.println("Remainder: " + restTime + " nanoseconds per iteration");
+    }
+}
+
diff --git a/libart/src/main/java/java/lang/Daemons.java b/libart/src/main/java/java/lang/Daemons.java
index a6ac449..381eb19 100644
--- a/libart/src/main/java/java/lang/Daemons.java
+++ b/libart/src/main/java/java/lang/Daemons.java
@@ -23,6 +23,7 @@ import java.lang.ref.FinalizerReference;
 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.TimeoutException;
 import libcore.util.EmptyArray;
 
@@ -171,18 +172,42 @@ public final class Daemons {
     private static class FinalizerDaemon extends Daemon {
         private static final FinalizerDaemon INSTANCE = new FinalizerDaemon();
         private final ReferenceQueue<Object> queue = FinalizerReference.queue;
-        private volatile Object finalizingObject;
-        private volatile long finalizingStartedNanos;
+        private final AtomicInteger progressCounter = new AtomicInteger(0);
+        private FinalizerReference<?> finalizingObject = null;  // Accesses may race!
 
         FinalizerDaemon() {
             super("FinalizerDaemon");
         }
 
         @Override public void run() {
+            // This loop may be performance critical, since we need to keep up with mutator
+            // generation of finalizable objects.
+            // We minimize the amount of work we do per finalizable object. For example, we avoid
+            // reading the current time here, since that involves a kernel call per object.  We
+            // limit fast path communication with FinalizerWatchDogDaemon to what's unavoidable: A
+            // non-volatile store to communicate the current finalizable object, e.g. for
+            // reporting, and a release store (lazySet) to a counter.
+            // We do stop the  FinalizerWatchDogDaemon if we have nothing to do for a
+            // potentially extended period.  This prevents the device from waking up regularly
+            // during idle times.
+
+            // Local copy of progressCounter; saves a fence per increment on ARM and MIPS.
+            int localProgressCounter = progressCounter.get();
+
             while (isRunning()) {
-                // Take a reference, blocking until one is ready or the thread should stop
                 try {
-                    doFinalize((FinalizerReference<?>) queue.remove());
+                    // Use non-blocking poll to avoid FinalizerWatchdogDaemon communication
+                    // when busy.
+                    finalizingObject = (FinalizerReference<?>)queue.poll();
+                    progressCounter.lazySet(++localProgressCounter);
+                    if (finalizingObject == null) {
+                        // Slow path; block.
+                        FinalizerWatchdogDaemon.INSTANCE.goToSleep();
+                        finalizingObject = (FinalizerReference<?>)queue.remove();
+                        progressCounter.set(++localProgressCounter);
+                        FinalizerWatchdogDaemon.INSTANCE.wakeUp();
+                    }
+                    doFinalize(finalizingObject);
                 } catch (InterruptedException ignored) {
                 }
             }
@@ -194,18 +219,10 @@ public final class Daemons {
             Object object = reference.get();
             reference.clear();
             try {
-                finalizingStartedNanos = System.nanoTime();
-                finalizingObject = object;
-                synchronized (FinalizerWatchdogDaemon.INSTANCE) {
-                    FinalizerWatchdogDaemon.INSTANCE.notify();
-                }
                 object.finalize();
             } catch (Throwable ex) {
                 // The RI silently swallows these, but Android has always logged.
                 System.logE("Uncaught exception thrown by finalizer", ex);
-            } finally {
-                // Done finalizing, stop holding the object as live.
-                finalizingObject = null;
             }
         }
     }
@@ -218,50 +235,67 @@ public final class Daemons {
     private static class FinalizerWatchdogDaemon extends Daemon {
         private static final FinalizerWatchdogDaemon INSTANCE = new FinalizerWatchdogDaemon();
 
+        private boolean needToWork = true;  // Only accessed in synchronized methods.
+
         FinalizerWatchdogDaemon() {
             super("FinalizerWatchdogDaemon");
         }
 
         @Override public void run() {
             while (isRunning()) {
-                boolean waitSuccessful = waitForObject();
-                if (waitSuccessful == false) {
+                if (!sleepUntilNeeded()) {
                     // We have been interrupted, need to see if this daemon has been stopped.
                     continue;
                 }
-                boolean finalized = waitForFinalization();
-                if (!finalized && !VMRuntime.getRuntime().isDebuggerActive()) {
-                    Object finalizedObject = FinalizerDaemon.INSTANCE.finalizingObject;
-                    // At this point we probably timed out, look at the object in case the finalize
-                    // just finished.
-                    if (finalizedObject != null) {
-                        finalizerTimedOut(finalizedObject);
-                        break;
-                    }
+                final FinalizerReference<?> finalizing = waitForFinalization();
+                if (finalizing != null && !VMRuntime.getRuntime().isDebuggerActive()) {
+                    finalizerTimedOut(finalizing);
+                    break;
                 }
             }
         }
 
-        private boolean waitForObject() {
-            while (true) {
-                Object object = FinalizerDaemon.INSTANCE.finalizingObject;
-                if (object != null) {
-                    return true;
-                }
-                synchronized (this) {
-                    // wait until something is ready to be finalized
-                    // http://code.google.com/p/android/issues/detail?id=22778
-                    try {
-                        wait();
-                    } catch (InterruptedException e) {
-                        // Daemon.stop may have interrupted us.
-                        return false;
-                    }
+        /**
+         * Wait until something is ready to be finalized.
+         * Return false if we have been interrupted.
+         * See also http://code.google.com/p/android/issues/detail?id=22778.
+         */
+        private synchronized boolean sleepUntilNeeded() {
+            while (!needToWork) {
+                try {
+                    wait();
+                } catch (InterruptedException e) {
+                    // Daemon.stop may have interrupted us.
+                    return false;
+                } catch (OutOfMemoryError e) {
+                    return false;
                 }
             }
+            return true;
         }
 
-        private void sleepFor(long startNanos, long durationNanos) {
+        /**
+         * Notify daemon that it's OK to sleep until notified that something is ready to be
+         * finalized.
+         */
+        private synchronized void goToSleep() {
+            needToWork = false;
+        }
+
+        /**
+         * Notify daemon that there is something ready to be finalized.
+         */
+        private synchronized void wakeUp() {
+            needToWork = true;
+            notify();
+        }
+
+        private synchronized boolean getNeedToWork() {
+            return needToWork;
+        }
+
+        private void sleepFor(long durationNanos) {
+            long startNanos = System.nanoTime();
             while (true) {
                 long elapsedNanos = System.nanoTime() - startNanos;
                 long sleepNanos = durationNanos - elapsedNanos;
@@ -279,14 +313,42 @@ public final class Daemons {
             }
         }
 
-        private boolean waitForFinalization() {
-            long startTime = FinalizerDaemon.INSTANCE.finalizingStartedNanos;
-            sleepFor(startTime, MAX_FINALIZE_NANOS);
-            // If we are finalizing an object and the start time is the same, it must be that we
-            // timed out finalizing something. It may not be the same object that we started out
-            // with but this doesn't matter.
-            return FinalizerDaemon.INSTANCE.finalizingObject == null ||
-                   FinalizerDaemon.INSTANCE.finalizingStartedNanos != startTime;
+
+        /**
+         * Return a FinalizerReference that took too long to process or null.
+         * Wait MAX_FINALIZE_NANOS.  If the FinalizerDaemon took essentially the whole time
+         * processing a single reference, return that reference.  Otherwise return null.
+         */
+        private FinalizerReference<?> waitForFinalization() {
+            long startCount = FinalizerDaemon.INSTANCE.progressCounter.get();
+            // Avoid remembering object being finalized, so as not to keep it alive.
+            sleepFor(MAX_FINALIZE_NANOS);
+            if (getNeedToWork() && FinalizerDaemon.INSTANCE.progressCounter.get() == startCount) {
+                // We assume that only remove() and doFinalize() may take time comparable to
+                // MAX_FINALIZE_NANOS.
+                // We observed neither the effect of the gotoSleep() nor the increment preceding a
+                // later wakeUp. Any remove() call by the FinalizerDaemon during our sleep
+                // interval must have been followed by a wakeUp call before we checked needToWork.
+                // But then we would have seen the counter increment.  Thus there cannot have
+                // been such a remove() call.
+                // The FinalizerDaemon must not have progressed (from either the beginning or the
+                // last progressCounter increment) to either the next increment or gotoSleep()
+                // call.  Thus we must have taken essentially the whole MAX_FINALIZE_NANOS in a
+                // single doFinalize() call.  Thus it's OK to time out.  finalizingObject was set
+                // just before the counter increment, which preceded the doFinalize call.  Thus we
+                // are guaranteed to get the correct finalizing value below, unless doFinalize()
+                // just finished as we were timing out, in which case we may get null or a later
+                // one.  In this last case, we are very likely to discard it below.
+                FinalizerReference<?> finalizing = FinalizerDaemon.INSTANCE.finalizingObject;
+                sleepFor(NANOS_PER_SECOND);
+                // Recheck to make it even less likely we report the wrong finalizing object in
+                // the case which a very slow finalization just finished as we were timing out.
+                if (getNeedToWork()
+                        && FinalizerDaemon.INSTANCE.progressCounter.get() == startCount) {
+                    return finalizing;
+                }
+            }
+            return null;
         }
 
         private static void finalizerTimedOut(Object object) {
@@ -317,7 +379,7 @@ public final class Daemons {
         }
     }
 
-    // Adds a heap trim task ot the heap event processor, not called from java. Left for
+    // Adds a heap trim task to the heap event processor, not called from java. Left for
     // compatibility purposes due to reflection.
     public static void requestHeapTrim() {
         VMRuntime.getRuntime().requestHeapTrim();
-- 
2.6.3

