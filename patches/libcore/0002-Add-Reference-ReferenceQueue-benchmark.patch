From a5fa916b055934546dd105c1b609248ff6b56208 Mon Sep 17 00:00:00 2001
From: Richard Uhler <ruhler@google.com>
Date: Thu, 29 Oct 2015 08:53:33 -0700
Subject: [PATCH 2/3] Add Reference/ReferenceQueue benchmark.

Bug: 24404957
Change-Id: I45ce4c6b897562b493e380bdba40ec99763493eb
---
 benchmarks/src/benchmarks/ReferenceBenchmark.java | 71 +++++++++++++++++++++++
 1 file changed, 71 insertions(+)
 create mode 100644 benchmarks/src/benchmarks/ReferenceBenchmark.java

diff --git a/benchmarks/src/benchmarks/ReferenceBenchmark.java b/benchmarks/src/benchmarks/ReferenceBenchmark.java
new file mode 100644
index 0000000..0fa63f2
--- /dev/null
+++ b/benchmarks/src/benchmarks/ReferenceBenchmark.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package benchmarks;
+
+import com.google.caliper.SimpleBenchmark;
+import java.lang.ref.PhantomReference;
+import java.lang.ref.ReferenceQueue;
+
+/**
+ * Benchmark to evaluate the performance of References.
+ */
+public class ReferenceBenchmark extends SimpleBenchmark {
+
+    private Object object;
+
+    // How fast can references can be allocated?
+    public void timeAlloc(int reps) {
+        ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+        for (int i = 0; i < reps; i++) {
+            new PhantomReference(object, queue);
+        }
+    }
+
+    // How fast can references can be allocated and manually enqueued?
+    public void timeAllocAndEnqueue(int reps) {
+        ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+        for (int i = 0; i < reps; i++) {
+            (new PhantomReference<Object>(object, queue)).enqueue();
+        }
+    }
+
+    // How fast can references can be allocated, enqueued, and polled?
+    public void timeAllocEnqueueAndPoll(int reps) {
+        ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+        for (int i = 0; i < reps; i++) {
+            (new PhantomReference<Object>(object, queue)).enqueue();
+        }
+        for (int i = 0; i < reps; i++) {
+            queue.poll();
+        }
+    }
+
+    // How fast can references can be allocated, enqueued, and removed?
+    public void timeAllocEnqueueAndRemove(int reps) {
+        ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+        for (int i = 0; i < reps; i++) {
+            (new PhantomReference<Object>(object, queue)).enqueue();
+        }
+        for (int i = 0; i < reps; i++) {
+            try {
+                queue.remove();
+            } catch (InterruptedException ie) {
+                i--;
+            }
+        }
+    }
+}
-- 
2.6.3

