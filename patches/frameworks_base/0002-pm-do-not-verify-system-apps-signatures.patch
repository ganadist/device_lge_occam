From 3553be13b914cdf6ae796c18d303c5cf2a98a9ac Mon Sep 17 00:00:00 2001
From: Young-Ho Cha <ganadist@gmail.com>
Date: Wed, 28 Oct 2015 17:50:20 +0900
Subject: [PATCH 2/4] pm: do not verify system apps signatures

Hack for Gapps stubs

Signed-off-by: Young-Ho Cha <ganadist@gmail.com>
---
 core/java/android/content/pm/JarUtils.java      | 238 ++++++++++++++++++++++++
 core/java/android/content/pm/PackageParser.java |  40 ++++
 2 files changed, 278 insertions(+)
 create mode 100644 core/java/android/content/pm/JarUtils.java

diff --git a/core/java/android/content/pm/JarUtils.java b/core/java/android/content/pm/JarUtils.java
new file mode 100644
index 0000000..4bd71d7
--- /dev/null
+++ b/core/java/android/content/pm/JarUtils.java
@@ -0,0 +1,238 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+/**
+* @author Boris Kuznetsov
+* @version $Revision$
+*/
+
+// from org.apache.harmony.security.utils;
+package android.content.pm;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.math.BigInteger;
+import java.security.GeneralSecurityException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.Principal;
+import java.security.Signature;
+import java.security.cert.Certificate;
+import java.security.cert.CertificateEncodingException;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import javax.security.auth.x500.X500Principal;
+
+import org.apache.harmony.security.asn1.ASN1OctetString;
+import org.apache.harmony.security.asn1.BerInputStream;
+import org.apache.harmony.security.pkcs7.ContentInfo;
+import org.apache.harmony.security.pkcs7.SignedData;
+import org.apache.harmony.security.pkcs7.SignerInfo;
+import org.apache.harmony.security.utils.WrappedX509Certificate;
+import org.apache.harmony.security.x501.AttributeTypeAndValue;
+
+public class JarUtils {
+
+    // as defined in PKCS #9: Selected Attribute Types:
+    // http://www.ietf.org/rfc/rfc2985.txt
+    private static final int[] MESSAGE_DIGEST_OID =
+        new int[] {1, 2, 840, 113549, 1, 9, 4};
+
+    /**
+     * This method handle all the work with  PKCS7, ASN1 encoding, signature verifying,
+     * and certification path building.
+     * See also PKCS #7: Cryptographic Message Syntax Standard:
+     * http://www.ietf.org/rfc/rfc2315.txt
+     * @param signature - the input stream of signature file to be verified
+     * @param signatureBlock - the input stream of corresponding signature block file
+     * @return array of certificates used to verify the signature file
+     * @throws IOException - if some errors occurs during reading from the stream
+     * @throws GeneralSecurityException - if signature verification process fails
+     */
+    public static Certificate[] loadSignature(InputStream
+            signatureBlock) throws IOException, GeneralSecurityException {
+
+        BerInputStream bis = new BerInputStream(signatureBlock);
+        ContentInfo info = (ContentInfo)ContentInfo.ASN1.decode(bis);
+        SignedData signedData = info.getSignedData();
+        if (signedData == null) {
+            throw new IOException("No SignedData found");
+        }
+        Collection<org.apache.harmony.security.x509.Certificate> encCerts
+                = signedData.getCertificates();
+        if (encCerts.isEmpty()) {
+            return null;
+        }
+        X509Certificate[] certs = new X509Certificate[encCerts.size()];
+        CertificateFactory cf = CertificateFactory.getInstance("X.509");
+        int i = 0;
+        for (org.apache.harmony.security.x509.Certificate encCert : encCerts) {
+            final byte[] encoded = encCert.getEncoded();
+            final InputStream is = new ByteArrayInputStream(encoded);
+            certs[i++] = new VerbatimX509Certificate((X509Certificate) cf.generateCertificate(is),
+                    encoded);
+        }
+
+        List<SignerInfo> sigInfos = signedData.getSignerInfos();
+        SignerInfo sigInfo;
+        if (!sigInfos.isEmpty()) {
+            sigInfo = sigInfos.get(0);
+        } else {
+            return null;
+        }
+
+        // Issuer
+        X500Principal issuer = sigInfo.getIssuer();
+
+        // Certificate serial number
+        BigInteger snum = sigInfo.getSerialNumber();
+
+        // Locate the certificate
+        int issuerSertIndex = 0;
+        for (i = 0; i < certs.length; i++) {
+            if (issuer.equals(certs[i].getIssuerDN()) &&
+                    snum.equals(certs[i].getSerialNumber())) {
+                issuerSertIndex = i;
+                break;
+            }
+        }
+        if (i == certs.length) { // No issuer certificate found
+            return null;
+        }
+
+        if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {
+            throw new SecurityException("Can not recognize a critical extension");
+        }
+
+        // Get Signature instance
+        final String daOid = sigInfo.getDigestAlgorithm();
+        final String daName = sigInfo.getDigestAlgorithmName();
+        final String deaOid = sigInfo.getDigestEncryptionAlgorithm();
+        final String deaName = sigInfo.getDigestEncryptionAlgorithmName();
+
+        String alg = null;
+        Signature sig = null;
+
+        if (daOid != null && deaOid != null) {
+            alg = daOid + "with" + deaOid;
+            try {
+                sig = Signature.getInstance(alg);
+            } catch (NoSuchAlgorithmException e) {
+            }
+
+            // Try to convert to names instead of OID.
+            if (sig == null && daName != null && deaName != null) {
+                alg = daName + "with" + deaName;
+                try {
+                    sig = Signature.getInstance(alg);
+                } catch (NoSuchAlgorithmException e) {
+                }
+            }
+        }
+
+        if (sig == null && deaOid != null) {
+            alg = deaOid;
+            try {
+                sig = Signature.getInstance(alg);
+            } catch (NoSuchAlgorithmException e) {
+            }
+
+            if (sig == null) {
+                alg = deaName;
+                try {
+                    sig = Signature.getInstance(alg);
+                } catch (NoSuchAlgorithmException e) {
+                }
+            }
+        }
+
+        // We couldn't find a valid Signature type.
+        if (sig == null) {
+            return null;
+        }
+
+        sig.initVerify(certs[issuerSertIndex]);
+
+        return createChain(certs[issuerSertIndex], certs);
+    }
+
+    private static X509Certificate[] createChain(X509Certificate signer,
+            X509Certificate[] candidates) {
+        Principal issuer = signer.getIssuerDN();
+
+        // Signer is self-signed
+        if (signer.getSubjectDN().equals(issuer)) {
+            return new X509Certificate[] { signer };
+        }
+
+        ArrayList<X509Certificate> chain = new ArrayList<X509Certificate>(candidates.length + 1);
+        chain.add(0, signer);
+
+        X509Certificate issuerCert;
+        int count = 1;
+        while (true) {
+            issuerCert = findCert(issuer, candidates);
+            if (issuerCert == null) {
+                break;
+            }
+            chain.add(issuerCert);
+            count++;
+            /* Prevent growing infinitely if there is a loop */
+            if (count > candidates.length) {
+                break;
+            }
+            issuer = issuerCert.getIssuerDN();
+            if (issuerCert.getSubjectDN().equals(issuer)) {
+                break;
+            }
+        }
+        return chain.toArray(new X509Certificate[count]);
+    }
+
+    private static X509Certificate findCert(Principal issuer, X509Certificate[] candidates) {
+        for (int i = 0; i < candidates.length; i++) {
+            if (issuer.equals(candidates[i].getSubjectDN())) {
+                return candidates[i];
+            }
+        }
+        return null;
+    }
+
+    /**
+     * For legacy reasons we need to return exactly the original encoded
+     * certificate bytes, instead of letting the underlying implementation have
+     * a shot at re-encoding the data.
+     */
+    private static class VerbatimX509Certificate extends WrappedX509Certificate {
+        private byte[] encodedVerbatim;
+
+        public VerbatimX509Certificate(X509Certificate wrapped, byte[] encodedVerbatim) {
+            super(wrapped);
+            this.encodedVerbatim = encodedVerbatim;
+        }
+
+        @Override
+        public byte[] getEncoded() throws CertificateEncodingException {
+            return encodedVerbatim;
+        }
+    }
+}
diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index 99bd390..0976207 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -1039,6 +1039,13 @@ public class PackageParser {
             } finally {
                 jarFile.close();
             }
+        } catch (SecurityException e) {
+            final String apkPath = pkg.baseCodePath;
+            final String systemDir = Environment.getRootDirectory().getPath();
+            final boolean isSystemApk = apkPath.startsWith(systemDir);
+            if (!isSystemApk) {
+                throw e;
+            }
         } catch (IOException | RuntimeException e) {
             throw new PackageParserException(INSTALL_PARSE_FAILED_MANIFEST_MALFORMED,
                     "Failed to collect manifest digest");
@@ -1068,6 +1075,39 @@ public class PackageParser {
             throws PackageParserException {
         final String apkPath = apkFile.getAbsolutePath();
 
+        final String systemDir = Environment.getRootDirectory().getPath();
+        final boolean isSystemApk = apkFile.getPath()
+                .startsWith(systemDir);
+        if (isSystemApk) {
+            try {
+                java.util.jar.JarFile jFile = new java.util.jar.JarFile(apkPath, false);
+
+                Slog.w(TAG, "Trying to extract public cert only");
+                final ZipEntry certEntry = jFile.getEntry("META-INF/CERT.RSA");
+                InputStream is = jFile.getInputStream(certEntry);
+
+                final Certificate[][] entryCerts = {
+                    JarUtils.loadSignature(is),
+                };
+
+                if (!ArrayUtils.isEmpty(entryCerts)) {
+                    final Signature[] entrySignatures = convertToSignatures(entryCerts);
+
+                    pkg.mCertificates = entryCerts;
+                    pkg.mSignatures = entrySignatures;
+                    pkg.mSigningKeys = new ArraySet<PublicKey>();
+                    for (int i=0; i < entryCerts.length; i++) {
+                        pkg.mSigningKeys.add(entryCerts[i][0].getPublicKey());
+                    }
+                    Slog.w(TAG, "extract public cert hack performed successful");
+                    return;
+                }
+            } catch (GeneralSecurityException e) {
+            } catch (IOException | RuntimeException e) {
+            }
+            Slog.w(TAG, "extract public cert hack is failed");
+        }
+
         StrictJarFile jarFile = null;
         try {
             jarFile = new StrictJarFile(apkPath);
-- 
2.6.3

