From 636dc51414b3704f13b32d4ae7de1731ad3984dd Mon Sep 17 00:00:00 2001
From: Young-Ho Cha <ganadist@gmail.com>
Date: Wed, 21 Oct 2015 22:08:09 +0900
Subject: [PATCH 3/3] SettingProvider: add camera behavior

This patch will be deprecated after MDB08I release

Signed-off-by: Young-Ho Cha <ganadist@gmail.com>
---
 core/java/android/provider/Settings.java           | 48 ++++++++++++++
 .../android/server/policy/PhoneWindowManager.java  | 77 ++++++++++++++++++++--
 2 files changed, 118 insertions(+), 7 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index fe95864..b544e6a 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -2129,6 +2129,51 @@ public final class Settings {
         public static final int END_BUTTON_BEHAVIOR_DEFAULT = END_BUTTON_BEHAVIOR_SLEEP;
 
         /**
+         * What happens when the user presses the end call button if they're not
+         * on a call.<br/>
+         * <b>Values:</b><br/>
+         * 0 - The end button does nothing.<br/>
+         * 1 - The end button goes to the home screen.<br/>
+         * 2 - The end button puts the device to sleep and locks the keyguard.<br/>
+         * 3 - The end button goes to the home screen.  If the user is already on the
+         * home screen, it puts the device to sleep.
+         */
+        public static final String CAMERA_ACCESSIBILITY_BEHAVIOR = "camera_launch_behavior";
+
+        /**
+         * CAMERA_ACCESSIBILITY_BEHAVIOR value for "factory default".
+         * @hide
+         */
+        public static final int CAMERA_ACCESSIBILITY_BEHAVIOR_FACTORY = 0x0;
+
+        /**
+         * CAMERA_ACCESSIBILITY_BEHAVIOR value for "nothing".
+         * @hide
+         */
+        public static final int CAMERA_ACCESSIBILITY_BEHAVIOR_NOTHING = 0x1;
+
+        /**
+         * CAMERA_ACCESSIBILITY_BEHAVIOR value for "home double tap".
+         * @hide
+         */
+        public static final int CAMERA_ACCESSIBILITY_BEHAVIOR_HOME_DOUBLE_TAP = 0x2;
+
+        /**
+         * CAMERA_ACCESSIBILITY_BEHAVIOR value for "power double tap".
+         * @hide
+         */
+        public static final int CAMERA_ACCESSIBILITY_BEHAVIOR_POWER_DOUBLE_TAP = 0x3;
+
+        /**
+         * CAMERA_ACCESSIBILITY_BEHAVIOR value for "power triple tap".
+         * @hide
+         */
+        public static final int CAMERA_ACCESSIBILITY_BEHAVIOR_POWER_TRIPLE_TAP = 0x4;
+
+        private static final Validator CAMERA_ACCESSIBILITY_BEHAVIOR_VALIDATOR =
+                new InclusiveIntegerRangeValidator(0, 4);
+ 
+        /**
          * Is advanced settings mode turned on. 0 == no, 1 == yes
          * @hide
          */
@@ -3301,6 +3346,7 @@ public final class Settings {
         public static final Set<String> PUBLIC_SETTINGS = new ArraySet<>();
         static {
             PUBLIC_SETTINGS.add(END_BUTTON_BEHAVIOR);
+            PUBLIC_SETTINGS.add(CAMERA_ACCESSIBILITY_BEHAVIOR);
             PUBLIC_SETTINGS.add(WIFI_USE_STATIC_IP);
             PUBLIC_SETTINGS.add(WIFI_STATIC_IP);
             PUBLIC_SETTINGS.add(WIFI_STATIC_GATEWAY);
@@ -3354,6 +3400,7 @@ public final class Settings {
         static {
             PRIVATE_SETTINGS.add(WIFI_USE_STATIC_IP);
             PRIVATE_SETTINGS.add(END_BUTTON_BEHAVIOR);
+            PRIVATE_SETTINGS.add(CAMERA_ACCESSIBILITY_BEHAVIOR);
             PRIVATE_SETTINGS.add(ADVANCED_SETTINGS);
             PRIVATE_SETTINGS.add(SCREEN_AUTO_BRIGHTNESS_ADJ);
             PRIVATE_SETTINGS.add(VIBRATE_INPUT_DEVICES);
@@ -3401,6 +3448,7 @@ public final class Settings {
         public static final Map<String, Validator> VALIDATORS = new ArrayMap<>();
         static {
             VALIDATORS.put(END_BUTTON_BEHAVIOR,END_BUTTON_BEHAVIOR_VALIDATOR);
+            VALIDATORS.put(CAMERA_ACCESSIBILITY_BEHAVIOR,CAMERA_ACCESSIBILITY_BEHAVIOR_VALIDATOR);
             VALIDATORS.put(WIFI_USE_STATIC_IP, WIFI_USE_STATIC_IP_VALIDATOR);
             VALIDATORS.put(BLUETOOTH_DISCOVERABILITY, BLUETOOTH_DISCOVERABILITY_VALIDATOR);
             VALIDATORS.put(BLUETOOTH_DISCOVERABILITY_TIMEOUT,
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 0fbb9ba..f2bdabb 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -550,6 +550,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     // Behavior of ENDCALL Button.  (See Settings.System.END_BUTTON_BEHAVIOR.)
     int mEndcallBehavior;
 
+    // Behavior of Camera Launch (See Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR.)
+    int mCameraAccessBehavior = -1;
+
     // Behavior of POWER button while in-call and screen on.
     // (See Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR.)
     int mIncallPowerBehavior;
@@ -713,6 +716,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(Settings.Secure.getUriFor(
                     Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR), false, this,
                     UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR), false, this,
+                    UserHandle.USER_ALL);
             resolver.registerContentObserver(Settings.Secure.getUriFor(
                     Settings.Secure.WAKE_GESTURE_ENABLED), false, this,
                     UserHandle.USER_ALL);
@@ -1453,17 +1459,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 com.android.internal.R.integer.config_shortPressOnPowerBehavior);
         mLongPressOnPowerBehavior = mContext.getResources().getInteger(
                 com.android.internal.R.integer.config_longPressOnPowerBehavior);
-        mDoublePressOnPowerBehavior = mContext.getResources().getInteger(
-                com.android.internal.R.integer.config_doublePressOnPowerBehavior);
-        mTriplePressOnPowerBehavior = mContext.getResources().getInteger(
-                com.android.internal.R.integer.config_triplePressOnPowerBehavior);
         mShortPressOnSleepBehavior = mContext.getResources().getInteger(
                 com.android.internal.R.integer.config_shortPressOnSleepBehavior);
 
         mUseTvRouting = AudioSystem.getPlatformType(mContext) == AudioSystem.PLATFORM_TELEVISION;
 
-        readConfigurationDependentBehaviors();
-
         mAccessibilityManager = (AccessibilityManager) context.getSystemService(
                 Context.ACCESSIBILITY_SERVICE);
 
@@ -1564,6 +1564,59 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 mStatusBarController.getAppTransitionListener());
     }
 
+    private void updateCameraAccessibilityBehavior(final int cameraAccessBehavior) {
+        mDoublePressOnPowerBehavior = mContext.getResources().getInteger(
+                com.android.internal.R.integer.config_doublePressOnPowerBehavior);
+        mTriplePressOnPowerBehavior = mContext.getResources().getInteger(
+                com.android.internal.R.integer.config_triplePressOnPowerBehavior);
+
+        readConfigurationDependentBehaviors();
+
+        switch(cameraAccessBehavior) {
+            case Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_HOME_DOUBLE_TAP:
+                mDoubleTapOnHomeBehavior = DOUBLE_TAP_HOME_LAUNCH_CAMERA;
+                if (mDoublePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mDoublePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                if (mTriplePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mTriplePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                break;
+            case Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_POWER_DOUBLE_TAP:
+                mDoublePressOnPowerBehavior = MULTI_PRESS_POWER_LAUNCH_CAMERA;
+                if (mDoubleTapOnHomeBehavior == DOUBLE_TAP_HOME_LAUNCH_CAMERA) {
+                    mDoubleTapOnHomeBehavior = DOUBLE_TAP_HOME_NOTHING;
+                }
+                if (mTriplePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mTriplePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                break;
+            case Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_POWER_TRIPLE_TAP:
+                mTriplePressOnPowerBehavior = MULTI_PRESS_POWER_LAUNCH_CAMERA;
+                if (mDoubleTapOnHomeBehavior == DOUBLE_TAP_HOME_LAUNCH_CAMERA) {
+                    mDoubleTapOnHomeBehavior = DOUBLE_TAP_HOME_NOTHING;
+                }
+                if (mDoublePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mDoublePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                break;
+            case Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_NOTHING:
+                if (mDoubleTapOnHomeBehavior == DOUBLE_TAP_HOME_LAUNCH_CAMERA) {
+                    mDoubleTapOnHomeBehavior = DOUBLE_TAP_HOME_NOTHING;
+                }
+                if (mDoublePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mDoublePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                if (mTriplePressOnPowerBehavior == MULTI_PRESS_POWER_LAUNCH_CAMERA) {
+                    mTriplePressOnPowerBehavior = MULTI_PRESS_POWER_NOTHING;
+                }
+                break;
+            case Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_FACTORY:
+            default:
+                break;
+        }
+    }
+
     /**
      * Read values from config.xml that may be overridden depending on
      * the configuration of the device.
@@ -1723,6 +1776,16 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT,
                     UserHandle.USER_CURRENT);
 
+            int cameraAccessBehavior = Settings.System.getIntForUser(resolver,
+                    Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR,
+                    Settings.System.CAMERA_ACCESSIBILITY_BEHAVIOR_FACTORY,
+                    UserHandle.USER_CURRENT);
+
+            if (cameraAccessBehavior != mCameraAccessBehavior) {
+                updateCameraAccessibilityBehavior(cameraAccessBehavior);
+                mCameraAccessBehavior = cameraAccessBehavior;
+            }
+
             // Configure wake gesture.
             boolean wakeGestureEnabledSetting = Settings.Secure.getIntForUser(resolver,
                     Settings.Secure.WAKE_GESTURE_ENABLED, 0,
@@ -2041,7 +2104,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             int navigationPresence) {
         mHaveBuiltInKeyboard = (keyboardPresence & PRESENCE_INTERNAL) != 0;
 
-        readConfigurationDependentBehaviors();
+        updateCameraAccessibilityBehavior(mCameraAccessBehavior);
         readLidState();
         applyLidSwitchState();
 
-- 
2.6.1

