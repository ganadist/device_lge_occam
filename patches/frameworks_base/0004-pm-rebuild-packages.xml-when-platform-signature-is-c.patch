From 7843350660eaf3f84c35c5107d5b9a5017e8fc73 Mon Sep 17 00:00:00 2001
From: Young-Ho Cha <ganadist@gmail.com>
Date: Sat, 24 Oct 2015 21:52:26 +0900
Subject: [PATCH] pm: rebuild packages.xml when platform signature is changed

When user change to custom rom, system permissions will be conflicted
and OS will be unstable. and user must perform factory reset.

But when delete packages.xml in this case, package manager collect
package signature and rebuild packages.xml.
And user can keep their data.

Signed-off-by: Young-Ho Cha <ganadist@gmail.com>
---
 .../core/java/com/android/server/pm/Settings.java  | 50 ++++++++++++++++++++++
 1 file changed, 50 insertions(+)

diff --git a/services/core/java/com/android/server/pm/Settings.java b/services/core/java/com/android/server/pm/Settings.java
index a762014..8563580 100644
--- a/services/core/java/com/android/server/pm/Settings.java
+++ b/services/core/java/com/android/server/pm/Settings.java
@@ -2643,6 +2643,7 @@ final class Settings {
                     ver.sdkVersion = XmlUtils.readIntAttribute(parser, ATTR_SDK_VERSION);
                     ver.databaseVersion = XmlUtils.readIntAttribute(parser, ATTR_SDK_VERSION);
                     ver.fingerprint = XmlUtils.readStringAttribute(parser, ATTR_FINGERPRINT);
+                    checkBuildFingerPrint(ver.fingerprint);
 
                 } else {
                     Slog.w(PackageManagerService.TAG, "Unknown element under <packages>: "
@@ -4820,4 +4821,53 @@ final class Settings {
             }
         }
     }
+
+    private void checkBuildFingerPrint(String fingerprint) {
+        if (isValidBuild(fingerprint)) {
+            return;
+        }
+        Slog.w(PackageManagerService.TAG, "might have wrong platform sign, reboot");
+        Slog.w(PackageManagerService.TAG, "old = " + fingerprint + " current = " + Build.FINGERPRINT );
+        mSettingsFilename.delete();
+        com.android.server.power.PowerManagerService.lowLevelReboot(null);
+        try {
+            while (true) {
+                Thread.sleep(100 * 1000);
+            }
+        } catch (InterruptedException ex) {}
+    }
+
+
+    private boolean isValidBuild(String fingerprint) {
+        if (!Build.USER.equals("ganadist")) {
+            return false;
+        }
+
+        if (TextUtils.isEmpty(fingerprint)) {
+            return false;
+        }
+
+        final String[] fingerprintSegs = fingerprint.split("/");
+        if (fingerprintSegs.length != 6) {
+            return false;
+        }
+
+        String[] buildNumberVariant = fingerprintSegs[4].split(":");
+        final long oldBuildNumber;
+
+        try {
+            oldBuildNumber = Long.parseLong(buildNumberVariant[0]);
+        } catch (NumberFormatException ex) {
+            Slog.w(PackageManagerService.TAG, "invalid build number: " +
+                    buildNumberVariant[0]);
+            return false;
+        }
+
+        Slog.w(PackageManagerService.TAG, "old build number = " +
+                oldBuildNumber);
+        if (oldBuildNumber < 20151025) {
+            return false;
+        }
+        return true;
+    }
 }
-- 
2.6.1

